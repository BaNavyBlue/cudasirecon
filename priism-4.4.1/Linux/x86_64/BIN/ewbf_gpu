#!/bin/sh

# Usage:
#     ewbf_gpu input_tilt_series output_tilt_series [gpurecon_options] \
#         [gpureproj_options] [-nrecon=n] [-multires] [-tmpdir=dir]
#
# Computes a projection series from another projection series using a
# combination of reconstruction of the input tilt series where every nth
# projection has been omitted with a reprojection to get every nth projection.
#
# Expects the standard Unix commands, awk, cat, chmod, cut, echo,
# expr, mkdir, rm, sed, test, and time to be in the search path.
#
# Expects the Priism commands AppendRes, gpurecon, gpureproj, header, and
# mergemrc to be in the search path.
#
# Creates temporary files (versions of the tilt series and intermediate
# reconstructions) in the directory specified by -tmpdir; if you do no
# explicitly specify the directory, the temporary files are placed in a
# directory named tmp in your home directory.  Will create the directory
# for the temporary files if needed.  The names of the temporary files use
# the process ID of the creator plus an extension.

# Since the script never uses pathname expansion, disable it.
set -f

status=0
trap_signals="INT QUIT TERM"

# Extract required arguments.
if test $# -lt 3; then
    echo "usage: ewbf_gpu input_tilt_series output_tilt_series [options]" 1>&2
    exit 1
fi
input_tilt_series="$1"
shift
output_tilt_series="$1"
shift

# Set up default values for options.  recon_options and reproj_options will
# collect options to be passed on.  Newlines wil be used to separate the
# options collected (that means that options which include newlines will not
# be handled correctly).
nrecon=10
multir=""
tmpdir="$HOME"/tmp
recon_options=""
reproj_options=""
nv=`echo 0 0 | header "$input_tilt_series" | sed -n -e '/Image Size (X,Y,Sections)\.\.*/ s/Image Size (X,Y,Sections)\.\.*//p' | awk '{print $3}'`
if test "$nv" -ge 2; then
    :
else
    status=1
    echo "ewbf_gpu: the input tilt series must have at least two sections"
fi

# Parse command line options.
while test $# -gt 0; do
    case "$1" in
        -nrecon=*)
            nrecon=`echo " $1" | sed -e 's/ -nrecon=//'`
            # Structure the test this way (empty then clause) to handle the
            # case where the value is not an integer.
            if test "$nrecon" -ge 2; then
                :
            else
                status=1
                echo "ewbf_gpu: number of reconstructions must be an integer greater than one" 1>&2
            fi
            ;;

        -multires)
            multir="yes"
            ;;

        -tmpdir=*)
            tmpdir=`echo " $1" | sed -e 's/ -tmpdir=//'`
            ;;

        -missingx=*)
            recon_options="$recon_options
$1"
            reproj_options="$reproj_options
$1"
            ;;

        -missingz=*)
            recon_options="$recon_options
$1"
            reproj_options="$reproj_options
$1"
            ;;

        -nomissing)
            recon_options="$recon_options
$1"
            reproj_options="$reproj_options
$1"
            ;;

        -res=*)
            recon_options="$recon_options
$1"
            reproj_options="$reproj_options
$1"
            ;;

        -rscale=*)
            recon_options="$recon_options
$1"
            reproj_options="$reproj_options
$1"
            ;;

        -server=*)
            recon_options="$recon_options
$1"
            reproj_options="$reproj_options
$1"
            ;;

        *)
            # Pass anything else to gpurecon.
            recon_options="$recon_options
$1"
            ;;
    esac
    shift
done

if test -e "$tmpdir"; then
    if test \! -d "$tmpdir"; then
        echo "ewbf_gpu: $tmpdir is not a directory" 1>&2
        status=1
    fi
else
    mkdir -p "$tmpdir" || status=1
fi

if test $status -ne 0; then
    exit 1
fi

if test $nrecon -gt $nv; then
    nrecon=$nv
fi

temp_recon="$tmpdir"/$$.xzyw
temp_series="$tmpdir"/$$.MnAln
temp_script="$tmpdir"/$$.scr
part_base=$$.reproj
temp_part_list="$tmpdir"/$$.parts

i=0
while test $i -lt $nrecon -a $status -eq 0; do
    trap 'cd "$tmpdir"; cut -d" " -f 1 "$temp_part_list" | xargs rm; rm "$temp_part_list" "$temp_series" "$temp_script"; exit 1' $trap_signals

    # Generate the projection series to backproject.
    cat >"$temp_script" <<EOF
#!/bin/sh
. "$IVE_BASE"/Priism_setup.sh
mergemrc "$temp_series" \\
EOF
    if test $? -ne 0; then
        status=1
    fi
    if test $i -gt 0; then
        cat >>"$temp_script" <<EOF
"$input_tilt_series" -in_sections=0:${i}:1 \\
EOF
        if test $? -ne 0; then
            status=1
        fi
        nomit=$i
    else
        nomit=0
    fi
    j=`expr $i + 1`
    while test $j -lt $nv; do
        j1=`expr $j + $nrecon - 1`
        if test $j1 -gt $nv; then
            j1=$nv
        fi
        cat >>"$temp_script" <<EOF
"$input_tilt_series" -in_sections=${j}:`expr $j1 - $j`:1 \\
EOF
        if test $? -ne 0; then
            status=1
        fi
        nomit=`expr $nomit + $j1 - $j`
        j=`expr $j1 + 1`
    done
    nomit=`expr $nv - $nomit`
    echo >>"$temp_script"
    if test $? -ne 0; then
        status=1
    fi
    if test $status -eq 0; then
        chmod a+x "$temp_script"
        if test $? -ne 0; then
            status=1 
            echo "ewbf_gpu: unable to make $temp_script executable" 1>&2
        fi
    else
        echo "ewbf_gpu: error generating $temp_script" 1>&2
    fi

    if test $status -eq 0; then
        echo "*** Running $temp_script"
        time "$temp_script"   
        if test $? -ne 0; then
            status=1
            echo "ewbf_gpu: failed to extract subset for reconstruction" 1>&2
        fi
    fi
    rm "$temp_script"

    trap 'cd "$tmpdir"; cut -d" " -f 1 "$temp_part_list" | xargs rm; rm "$temp_part_list" "$temp_series" "$temp_recon"; exit 1' $trap_signals

    if test $status -eq 0; then
        # Do the reconstruction.
        # Reset the positional arguments to be the ones that are passed through
        # to ewbp.
        old_ifs="$IFS"
        # Just a newline.
        IFS='
'
        set -- $recon_options
        IFS="$old_ifs"

        echo "*** Running gpurecon $temp_series $temp_recon $@"
        time gpurecon "$temp_series" "$temp_recon" "$@"
        if test $? -ne 0; then
            status=1
        fi
    fi

    # Generate the template projection series for the reprojection.
    if test $status -eq 0; then
        echo "*** Running mergemrc $temp_series $input_tilt_series -in_sections=${i}:${nomit}:${nrecon}"
        time mergemrc "$temp_series" "$input_tilt_series" -in_sections=${i}:${nomit}:${nrecon}
        if test $? -ne 0; then
            status=1
            echo "ewbf_gpu: failed to create $temp_series"
        fi
    fi

    # Reproject.
    part=${part_base}_$i
    if test $i -eq 0; then
        echo $part -out_sections=${i}:${nomit}:${nrecon} > "$temp_part_list"
    else
        echo $part -out_sections=${i}:${nomit}:${nrecon} >> "$temp_part_list"
    fi
    if test $? -ne 0; then
        status=1
        echo "ewbf_gpu: unable to update $temp_part_list" 1>&2
    fi
    if test $status -eq 0; then    
        old_ifs="$IFS"
        # Just a newline.
        IFS='
'
        set -- $reproj_options
        IFS="$old_ifs"

        echo "*** Running gpureproj" "$temp_recon" "$temp_series" "$tmpdir/$part" "$@"
        time gpureproj "$temp_recon" "$temp_series" "$tmpdir"/$part "$@"

        if test $? -ne 0; then
            status=1
        fi
    fi

    rm "$temp_recon" "$temp_series"

    trap 'cd "$tmpdir"; cut -d" " -f 1 "$temp_part_list" | xargs rm; rm "$temp_part_list"; exit 1' $trap_signals

    i=`expr $i + 1`
done

# Merge the pieces.
cd "$tmpdir"
if test $? -ne 0; then
    status=1
fi
if test $status -eq 0; then
    echo "*** Running mergemrc $output_tilt_series -f=$temp_part_list"
    time mergemrc -specify_out "$output_tilt_series" -f="$temp_part_list"
    if test $? -ne 0; then
        status=1
        echo "ewbf_gpu: failed to merge results to form $output_tilt_series"
    fi
fi

cut -d' ' -f 1 "$temp_part_list" | xargs rm
rm "$temp_part_list"

if test -n "$multir" -a $status -eq 0; then
    nres=1
    size=`echo 0 0 | header "$output_tilt_series" | sed -n -e '/Image Size (X,Y,Sections\.\.*/ s/Image Size (X,Y,Sections)\.\.*//p'`
    nx=`echo " $size" | awk '{print $1}'`
    ny=`echo " $size" | awk '{print $2}'`
    while test \( "$nx" -gt 256 -o "$ny" -gt 256 \) -a "$nx" -gt 2 -a "$ny" -gt 2; do
        nx=`expr "$nx" / 2`
        ny=`expr "$ny" / 2`
        nres=`expr $nres + 1`
    done
    if test $nres -gt 1; then
	echo "*** Running AppendRes $output_tilt_series $nres 1"
	time AppendRes "$output_tilt_series" $nres 1
    fi
fi

exit $status
