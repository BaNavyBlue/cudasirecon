#!/bin/sh

# Parses an mpich style machines file and prints the total number of
# processors.  With -h, only counts the number of unique host names
# (by string matching; host names that are different by string matching
# but represent the same system are counted as unique).
#
# Usage:  count_processors [-h] [machines_file_name]

if test $# -ge 1 ; then
    if test X-h = X"$1" ; then
        shift;
        unique_hosts=1
    else
        unique_hosts=0
    fi
fi
if test $# -gt 1; then
    echo "usage: count_processors [-h] [machines_file_name]" 1>&2
    exit 1
elif test $# -eq 1; then
    if test -r "$1"; then
        exec < "$1"
    else
        echo "count_processors: can not read $1" 1>&2
        exit 1
    fi
fi

prog='
BEGIN { nproc = 0 }
/^[ \t\v\f\r\n]*[-a-zA-Z0-9.]+[ \t\v\f\r\n]*$/ { ++nproc }
/^[ \t\v\f\r\n]*[-a-zA-Z0-9.]+[ \t\v\f\r\n]*#/ { ++nproc }
/^[ \t\v\f\r\n]*[-a-zA-Z0-9.]+:[0-9]+[ \t\v\f\r\n]*$/ {
    split($0,a,":"); nproc += a[2]
}
/^[ \t\v\f\r\n]*[-a-zA-Z0-9.]+:[0-9]+[ \t\v\f\r\n]*#/ {
    split($0,a,":"); split(a[2],b,"#"); nproc += b[1]
}
END { print nproc }
'

if test $unique_hosts = 0 ; then
    awk "$prog"
else
    cut -d\# -f1 | cut -d\: -f1 | tr -d ' \t\v\f\r' | sort | uniq | awk "$prog"
fi
exit 0
