#!/bin/sh

# Usage:
#     emtiar_gpu input_tilt_series input_align_param output_align_param_base \
#         output_recon -start=n -runs=n -cycles=n \
#         -res=i -fullsize=nx:ny -rscale=i -skip_init -imform=mode -pcbase=b \
#         -dimxy=nx:ny -iv=start:end:step -shxyz=x:y:z \
#         -dev=tx:ty:rot:mag:axis:mag2 -imod=m -mult=s -nofilter \
#         -nooffset -phaseweight -cpd=d -spth=t -cor_out=xcname -reconz=nz \
#         -istrfile=reconguess -restart_recon -method=m -block=b -convf=f \
#         -smooth=s -permute=p -posintvl=i -bpfilter=f \
#         -bphamming -bpparticle=x:z -missingx=xhw:xpos \
#         -missingz=zhw:zpow -nomissing \
#         -server=s -gres=i -multires -tmpdir=directory
#
# Expects the standard Unix commands, awk, basename, cp, echo, expr,
# mkdir, mv, rm, sed, test, and time to be in the search path.
#
# Expects the Priism commands align_2d_pi, appl_prm, header, gpurecon,
# and gpureproj to be in the search path.
#
# Creates temporary files (the latest aligned tilt series, reconstruction,
# and reprojection) in the directory specified by -tmpdir=.  By default
# this directory is a directory named tmp in your home directory.  Will
# create the directory for temporary files (and any parent directories, if
# necessary) if that directory does not exist.  The names of the temporary
# files use the process ID of the creator plus an extension.

# Since the script never uses pathname expansion, disable it.
set -f

status=0
trap_signals="INT QUIT TERM"

# Extract required arguments.
if test $# -lt 4; then
    echo "usage: emtiar_gpu input_tilt_series input_align_param output_align_param_base output_recon [options]" 1>&2
    exit 1
fi
input_tilt_series="$1"
shift
param_file="$1"
shift
output_param_base="$1"
shift
output_recon="$1"
shift

# Set up default values for options.  The initial_appl_prm_options,
# appl_prm_options, recon_options, reproj_options, and align_2d_options
# variables will collect options to be passed on.  Newlines will be used to
# separate the options collected (that means that options which include
# newlines will not be handled correctly).
irun=1
nrun=1
tmpdir="$HOME"/tmp
ires=0
igres=0
initial_appl_prm=yes
initial_appl_prm_options="
-iprmfile=$param_file
-noalign"
appl_prm_options="
-imform=2"
apxshift=0.0
apyshift=0.0
apzshift=0.0
method_set=no
recon_options="
-res=0"
reproj_options=""
ncycles=20
input_size=`echo 0 0 | header "$input_tilt_series" | sed -n -e '/Image Size (X,Y,Sections)\.\.*/ s/Image Size (X,Y,Sections)\.\.*//p'`
reconx=`echo " $input_size" | awk '{print $1}'`
# Structure the tests this way to handle the cases where the values are not
# integers.
if test "$reconx" -gt 0; then
    reconz=`expr "$reconx" / 4`
else
    reconz=0
    status=1
    echo "emtiar_gpu: could not determine x size" 1>&2
fi
recon_end_y=`echo " $input_size" | awk '{print $2}'`
if test "$recon_end_y" -gt 0; then
    recon_end_y=`expr "$recon_end_y" - 1`
else
    recon_end_y=0
    status=1
    echo "emtiar_gpu: could not determine y size"
fi
unset input_size
istrfile=""
restart_recon=0
align_2d_options="-resref=0
"

# Parse command line options.
while test $# -gt 0; do
    case "$1" in
        -start=*)
	    irun=`echo " $1" | sed -e 's/ -start=//'`
            # Structure the test this way (empty then clause) to handle
            # the case where the value is not an integer.
	    if test "$irun" -gt 0; then
                :
	    else
	        status=1
		echo "emtiar_gpu: starting run number must be a positive integer" 1>&2
	    fi
            ;;

        -runs=*)
	    nrun=`echo " $1" | sed -e 's/ -runs=//'`
            # Structure the test this way (empty then clause) to handle
            # the case where the value is not an integer.
	    if test "$nrun" -ge 0; then
                :
	    else
		status=1
		echo "emtiar_gpu: number of runs must be a non-negative integer" 1>&2
            fi
            ;;

        -noterm)
            autoterm=0
            ;;

        -res=*)
            ires=`echo " $1" | sed -e 's/ -res=//'`
            # Structure the test this way (empty then clause) to handle the
            # case where the values is not an integer.
            if test "$ires" -ge 0; then
                :
            else
                status=1
                echo "emtiar_gpu: selected resolution must be a non-negative integer" 1>&2
            fi
            ;;

        -fullsize=*)
            initial_appl_prm_options="$initial_appl_prm_options
$1"
            appl_prm_options="$appl_prm_options
$1"
            align_2d_options="$align_2d_options
$1"
            ;;

        -rscale=*)
            initial_appl_prm_options="$initial_appl_prm_options
$1"
            appl_prm_options="$appl_prm_options
$1"
            align_2d_options="$align_2d_options
$1"
            recon_options="$recon_options
$1"
            reproj_options="$reproj_options
$1"
            ;;

        -cycles=*)
	    ncycles=`echo " $1" | sed -e 's/ -cycles=//'`
            ;;

        -dimxy=*)
            appl_prm_options="$appl_prm_options
$1"
            ;;

        -iv=*)
            appl_prm_options="$appl_prm_options
$1"
            ;;

        -shxyz=*)
            apxshift=`echo " $1" | sed -e 's/ -shxyz=//' | cut -d : -f 1`
            i=`echo " $1" | sed -e 's/ -shxyz=//' | cut -s -d : -f 2`
            if test \! -z "$i"; then
                apyshift="$i"
            fi
            i=`echo " $1" | sed -e 's/ -shxyz=//' | cut -s -d : -f 3`
            if test \! -z "$i"; then
                apzshift="$i"
            fi
            ;;

        -dev=*)
            align_2d_options="$align_2d_options
$1"
            ;;

        -imod=*)
            align_2d_options="$align_2d_options
$1"
            ;;

        -mult=*)
            align_2d_options="$align_2d_options
$1"
            ;;

        -nofilter)
            align_2d_options="$align_2d_options
$1"
            ;;

        -nooffset)
            align_2d_options="$align_2d_options
$1"
            ;;

        -phaseweight)
            align_2d_options="$align_2d_options
$1"
            ;;

        -cpd=*)
            align_2d_options="$align_2d_options
$1"
            ;;

        -spth=*)
            align_2d_options="$align_2d_options
$1"
            ;;

        -cor_out=*)
            align_2d_options="$align_2d_options
$1"
            ;;

        -imform=*)
            initial_appl_prm_options="$initial_appl_prm_options
$1"
            ;;

	-istrfile=*)
            istrfile=`echo " $1" | sed -e 's/ -istrfile=//'`
            if test none = "$istrfile"; then
                istrfile=""
            fi
            ;;

        -pcbase=*)
            initial_appl_prm_options="$initial_appl_prm_options
$1"
            ;;

        -skip_init)
            initial_appl_prm=no
            ;;

        -method=*)
            recon_options="$recon_options
$1"
            method_set=yes
            ;;

        -block=*)
            recon_options="$recon_options
$1"
            ;;

        -convf=*)
            recon_options="$recon_options
$1"
            ;;

	-posintvl=*)
	    recon_options="$recon_options
$1"
	    ;;

	-smooth=*)
	    recon_options="$recon_options
$1"
	    ;;

        -permute=*)
	    recon_options="$recon_options
$1"
	    ;;

        -bpfilter=*)
	    recon_options="$recon_options
$1"
	    ;;

	-bphamming)
	    recon_options="$recon_options
$1"
	    ;;

	-bpparticle=*)
	    recon_options="$recon_options
$1"
	    ;;

        -missingx=*)
            recon_options="$recon_options
$1"
            reproj_options="$reproj_options
$1"
            ;;

        -missingz=*)
            recon_options="$recon_options
$1"
            reproj_options="$reproj_options
$1"
            ;;

        -nomissing)
            recon_options="$recon_options
$1"
            reproj_options="$reproj_options
$1"
            ;;

        -reconz=*)
	    reconz=`echo " $1" | sed -e 's/ -reconz=//'`
            ;;

        -restart_recon)
            restart_recon=1
            ;;

        -server=*)
            recon_options="$recon_options
$1"
            reproj_options="$reproj_options
$1"
            ;;

        -tmpdir=*)
	    tmpdir=`echo " $1" | sed -e 's/ -tmpdir=//'`
            ;;

        -gres=*)
            igres=`echo " $1" | sed -e 's/ -gres=//'`
            # Structure the test this way (empty then clause) to handle the
            # case where the values is not an integer.
            if test "$igres" -ge 0; then
                :
            else
                status=1
                echo "emtiar_gpu: selected resolution from guess must be a non-negative integer" 1>&2
            fi
            ;;

        -multires)
            recon_options="$recon_options
$1"
            ;;

        -slab)
            reproj_options="$reproj_options
$1"
            ;;
    esac
    shift
done

if test -e "$tmpdir"; then
    if test \! -d "$tmpdir"; then
        echo "emtiar: $tmpdir is not a directory" 1>&2
        status=1
    fi
else
    mkdir -p "$tmpdir" || status=1
fi

if test $status -ne 0; then
    exit 1
fi

nrun=`expr $nrun + $irun`

temp_aligned="$tmpdir"/$$.MnAln

temp_recon="$tmpdir"/$$.xzy
recon_options="$recon_options
-reconxz=${reconx}:${reconz}
-iy=0:${recon_end_y}
-cycles=$ncycles"
if test $method_set = no; then
    recon_options="$recon_options
-method=sart"
fi
temp_reproj="$tmpdir"/$$.reproj

output_param_ext=`basename "$param_file" | awk '{ n = split($0,a,"."); if (n > 1) print "." a[n]; else print "" }'`

lastr=1.0
increasedr=0

# Perform the data processing.

if test $initial_appl_prm = yes; then
    target_tilt_series="$tmpdir"/$$.Mn
    old_ifs="$IFS"
    # Just a newline.
    IFS='
'
    initial_appl_prm_options="$initial_appl_prm_options
-res=$ires"
    ires=0
    set -- $initial_appl_prm_options
    IFS="$old_ifs"
    echo "**** Running: appl_prm" "$input_tilt_series" "$target_tilt_series" \
        "$@"
    trap 'rm "$target_tilt_series"; exit 1' $trap_signals
    time appl_prm "$input_tilt_series" "$target_tilt_series" "$@"
    if test $? -ne 0; then
        status=1
    fi
else
    target_tilt_series="$input_tilt_series"
fi
appl_prm_options="$appl_prm_options
-res=$ires"
align_2d_options="$align_2d_options
-res=$ires"

while test $irun -lt $nrun -a "$increasedr" -eq 0 -a $status -eq 0; do
    old_ifs="$IFS"
    # Just a newline.
    IFS='
'
    set -- $appl_prm_options
    IFS="$old_ifs"
    echo "**** Running: appl_prm" "$target_tilt_series" "$temp_aligned" \
	-iprmfile="$param_file" -shxyz="$apxshift":"$apyshift":"$apzshift" "$@"
    trap 'test X"$input_tilt_series" != X"$target_tilt_series" && rm "$target_tilt_series"; rm "$temp_aligned"; exit 1' $trap_signals
    time appl_prm "$target_tilt_series" "$temp_aligned" \
	-iprmfile="$param_file" -shxyz="$apxshift":"$apyshift":"$apzshift" "$@"
    if test $? -ne 0; then
        status=1
    fi

    if test $status -eq 0; then
        old_ifs="$IFS"
        # Just a newline.
        IFS='
'
        set -- $recon_options
        IFS="$old_ifs"
        trap 'test X"$input_tilt_series" != X"$target_tilt_series" && rm "$target_tilt_series"; rm "$temp_aligned" "$temp_recon"; exit 1' $trap_signals
        if test -z "$istrfile"; then
            echo "**** Running: gpurecon" "$temp_aligned" "$temp_recon" \
	        "$@"
            time gpurecon "$temp_aligned" "$temp_recon" "$@"
        else
            echo "**** Running: gpurecon" "$temp_aligned" "$temp_recon" \
	        -istrfile="$istrfile" "$@"
   	    time gpurecon "$temp_aligned" "$temp_recon" -istrfile="$istrfile" -gres="$igres" "$@"
        fi
        igres=0
        if test $? -ne 0; then
            status=1
        fi
    fi

    rm "$temp_aligned"
    mv "$temp_recon" "$output_recon"
    if test $? -ne 0; then
        status=1
    fi
    if test $restart_recon -eq 0; then
        istrfile="$output_recon"
    else
        istrfile=""
    fi

    if test $status -eq 0; then
        old_ifs="$IFS"
        # Just a newline.
        IFS='
'
        set -- $reproj_options
        IFS="$old_ifs"
        echo "**** Running: gpureproj" "$output_recon" "$target_tilt_series" \
	    "$temp_reproj" "$@"
        trap 'test X"$input_tilt_series" != X"$target_tilt_series" && rm "$target_tilt_series"; rm "$temp_reproj"; exit 1' $trap_signals
        time gpureproj "$output_recon" "$target_tilt_series" "$temp_reproj" "$@"
        if test $? -ne 0; then
            status=1
        fi
    fi

    new_param_file="$output_param_base"_"$irun""$output_param_ext"
    if test $status -eq 0; then
        old_ifs="$IFS"
        # Just a newline.
        IFS='
'
        set -- $align_2d_options
        IFS="$old_ifs"
        echo "**** Running: align_2d_pi" "$temp_reproj" "$target_tilt_series" \
	    -iprmfile="$param_file" -oprmfile="$new_param_file" \
   	    -shxyz="$apxshift":"$apyshift":"$apzshift" "$@"
        time align_2d_pi "$temp_reproj" "$target_tilt_series" \
	    -iprmfile="$param_file" -oprmfile="$new_param_file" \
	    -shxyz="$apxshift":"$apyshift":"$apzshift" "$@"
        if test $? -ne 0; then
            status=1
        fi
    fi

    rm "$temp_reproj"
    param_file="$new_param_file"

    irun=`expr $irun + 1`
done

test X"$input_tilt_series" != X"$target_tilt_series" && rm "$target_tilt_series"

exit $status
