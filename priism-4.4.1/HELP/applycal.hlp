KEYWORD
          WaveFiles Float

DESCRIPTION
          Normally, image data is calibrated and bad pixels are
          edited out during the process of data collection;
          alternatively, you can use applycal to perform these
          operations after data collection.

          applycal is a command-line application.  There's a
          graphical front-end, applycal_i, which will generate
          a suitable command file for running applycal.  Options
          for specifying the region to process and aspects of the
          graphical front-end are the same for applycal as for
          many other applications.  See BatchRegion.hlp for a
          description of these common elements.

WaveFiles
          For each wave processed, applycal takes the name of
          a calibration file for that wave and the name of a
          file containing a list of pixels which should be edited
          out.  For any wave, the calibration file can be omitted
          and no calibration will be performed on that wave's
          data; similarly, you can omit the bad pixel list for
          any wave so that pixel editing isn't applied to the data
          in that wave.

          The calibration files must be image files in MRC format
          with at least two images.  The number of samples in x
          and y in those images must match the full size of the
          input data to be corrected.  The first image in the
          calibration file is used as an offset and the second
          image in the calibration file is used as a gain factor.
          applycal's result after correcting the input for the
          calibration file is the result of multiplying the
          difference between the input and the offset by the
          gain factor.

          The bad pixel files must be text files.  The first
          line in a bad pixel file must be " badpixel_number:"
          followed by the number of bad pixels in the file.
          The remainder of the file must have one line per bad
          pixel with three integer values separated by white
          space on each line.  The first integer is the one-
          dimensional coordinate of the pixel to correct.  The
          second two integers are the one-dimensional
          coordinates of the pixels to use to in the correction.
          If the third integer is less than zero or greater than
          or equal to the number of x samples times the number
          of y samples, the corrected pixel is equal to the
          value at the first pixel to use for the correction.
          Otherwise, the corrected pixel is equal to the average
          of the values at the two pixels to use for correction.
          The one-dimensional coordinate of a pixel whose x and
          y indices in the full image are ix and iy (ix is an
          integer greater than or equal to zero and less than
          the number of samples in x, nx, and iy is an integer
          greater than or equal to zero and less than the number
          of samples in y) is ix + iy * nx.  applycal will
          automatically adjust the bad pixel list for the subset
          of the image in x or y that you selected to correct.
          When it does so, applycal will not use pixels outside
          of the subset to correct pixels in the subset.

          In the graphical front-end for applycal, the calibration
          file and bad pixel list are grouped by wave.  Next to
          each is a toggle which when on indicates that that file
          should be used in the processing; you can select a file
          by entering its name directly or by pressing a
          "Calibration file" or "Bad pixels file" button to
          launch a file selection dialog.  Selecting a file with
          the file selection dialog will automatically set the
          toggle to indicate that file will be used in processing.

          On the command-line, the calibration files are specified
          by an argument of the form
            -calfiles=file_1:file_2:file_3:file_4:file_5
          where file_x is the calibration file for the xth wave
          in the input file.  Any of the files can be omitted
          (the separating colons must still be included), or you
          can omit one or more entries from the end. For instance,
            -calfiles=/usr/tmp/dapi_480x480.CAL
          specifies that wave one in the input file will be
          calibrated with /usr/tmp/dapi_480x480.CAL and that no
          other waves will be calibrated.
            -calfiles=:/usr/tmp/dapi_480x480.CAL:/usr/tmp/rhod_480x480.CAL::
          specifies that wave one won't be calibrated, wave two
          will be calibrated with /usr/tmp/dapi_480x480.CAL, wave
          three will be calibrated with /usr/tmp/rhod_480x480.CAL,
          and no other waves will be calibrated.  The argument
            -calfiles=:/usr/tmp/dapi_480x480.CAL:/usr/tmp/rhod_480x480.CAL
          has the same effect.

          If no -calfiles argument appears on the command-line,
          applycal will prompt for the filenames and read them
          from standard input.

          The bad pixel lists are specified with
            -pixfiles=file_1:file_2:file_3:file_4:file_5
          Such an argument (or its absence) is handled just as
          -calfiles is handled.

Float
          By default, applycal uses the same representation
          (byte, short, float) for an output pixel's data as
          was used for an input pixel.  Setting the "Force
          floating-point output" toggle in the graphical
          front-end or specifying "-float" on the command-line
          will cause applycal to use a floating-point
          representation for the output data.

          applycal's internal calculations are always done in
          floating-point arithmetic regardless of the format of
          the input or output.
