KEYWORD
     output_file swap_bytes include_skew

DESCRIPTION
     This application takes a Priism file and writes out
     a file in CCP4's native format.

     mrc2ccp4 has the standard set of Priism controls
     for selecting a subset of the Priism file to convert.
     For the conversion, enter the name of the file to be
     generated in the "Output file" field.  If the input
     file uses floating-point values or complex floating-
     point values to represent the data, mrc2ccp4 can
     perform the conversion in place (in other words,
     the output file name can be the same as the input
     file name); otherwise, the output file name must
     be different than the input file name.  By default,
     mrc2ccp4 will generate a file using the native byte
     ordering for the operating system and machine where
     you run mrc2ccp4.  To generate a file with the non-
     native byte ordering, turn on the "swap bytes"
     toggle button.

     mrc2ccp4 by default does not set a skew transform-
     ation in the header of the CCP4 file.  If you turn
     on the "include skew" toggle button, mrc2ccp4 will
     include the skew transformation calculated from
     the rotation angles and origin in the Priism
     file's header:  consult the include_skew topic for
     details about the transformation.

     mrc2ccp4 will only convert the first wavelength and
     time point that you select.  mrc2ccp4 will not
     transfer the wavelength information from the
     Priism header.  It only transfers the extended
     header if the extended header appears to contain
     symmetry information (i.e. the space group field
     in the header is not zero).

     mrc2ccp4 accepts the command-line arguments described
     in Region.hlp.  In addition, it has the following
     options:

         -out=n
             Sets the name of the output file to be n.
             If you do not include this option, mrc2ccp4
             attempts to perform the conversion in place.

         -swab
             Causes mrc2ccp4 to generate files with the
             non-native byte ordering.  By default,
             mrc2ccp4 generates files with the native byte
             ordering.

         -skew
             Causes mrc2ccp4 to set the skew transformation
             entries in the header from the tilt angles and
             origin of the Priism file.

     The example below extracts a 160 x 160 x 160 region
     from a.dat and writes it to a.ccp4 in the non-native
     byte ordering.

         mrc2ccp4 a.dat -x=0:159 -y=0:159 -z=0:159 \
             -out=a.ccp4 -swab

output_file
     Enter the name of the CCP4 file to generate in the
     field next to the "Output file" button or use the
     "Output file" button to select the file with a
     file selection dialog.  As currently implemented,
     mrc2ccp4 will allow the input file and the output
     file to be the same (i.e. the conversion is
     performed in place) if the input file uses floating-
     point or complex floating-point values to represent
     the data.

swap_bytes
     By default, mrc2ccp4 generates CCP4 files in the
     native byte ordering for the machine and operating
     system where you run mrc2ccp4.  To generate a file
     with the non-native byte ordering, turn on the
     "swap bytes" toggle button.

include_skew
     By default, mrc2ccp4 does not set a skew trans-
     formation in the header of the CCP4 file.  If
     you turn on the "include skew" toggle button,
     mrc2ccp4 will include a transformation matrix
     and translation vector in the header.  The
     transformation matrix entries (s11, s12, ...)
     will be the product of three matrices as given
     by:

         [ s11  s12  s13 ]
         [ s21  s22  s23 ] = X * Y * Z
         [ s31  s32  s33 ]

     where

             [ 1     0        0    ]
         X = [ 0   cos(a)  -sin(a) ]
             [ 0   sin(a)   cos(a) ]

             [  cos(b)  0   sin(b) ]
         Y = [    0     1     0    ]
             [ -sin(b)  0   cos(b) ]

             [  cos(g)  -sin(g)  0 ]
         Z = [  sin(g)   cos(g)  0 ]
             [    0        0     1 ]

     and a, b, and g are the 4-byte floating-point
     values, in units of degrees, at bytes 185
     through 188, 189 through 192, and 193 through
     196, respectively in the Priism header.  The
     translation will be the product of the inverse
     of the S matrix times the origin values in the
     Priism header (o1, o2, and o3 are the 4-byte
     floating-point values at bytes 213 through
     216, 217 through 220, and 209 through 212,
     respectively):

         [ t1 ]    -1   -1    -1  [ o1 ]
         [ t2 ] = Z  * Y  *  X  * [ o2 ]
         [ t3 ]                   [ o3 ]
